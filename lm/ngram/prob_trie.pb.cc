// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prob_trie.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "prob_trie.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lm {
namespace ngram {

namespace {

const ::google::protobuf::Descriptor* ProbTrieProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProbTrieProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_Child_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_Child_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_prob_5ftrie_2eproto() {
  protobuf_AddDesc_prob_5ftrie_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "prob_trie.proto");
  GOOGLE_CHECK(file != NULL);
  ProbTrieProto_descriptor_ = file->message_type(0);
  static const int ProbTrieProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbTrieProto, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbTrieProto, root_),
  };
  ProbTrieProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProbTrieProto_descriptor_,
      ProbTrieProto::default_instance_,
      ProbTrieProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProbTrieProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbTrieProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbTrieProto, _is_default_instance_));
  Node_descriptor_ = file->message_type(1);
  static const int Node_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, pseudo_prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, backoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, child_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _is_default_instance_));
  Node_Child_descriptor_ = Node_descriptor_->nested_type(0);
  static const int Node_Child_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Child, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Child, node_),
  };
  Node_Child_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_Child_descriptor_,
      Node_Child::default_instance_,
      Node_Child_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node_Child),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Child, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Child, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_prob_5ftrie_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProbTrieProto_descriptor_, &ProbTrieProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_Child_descriptor_, &Node_Child::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_prob_5ftrie_2eproto() {
  delete ProbTrieProto::default_instance_;
  delete ProbTrieProto_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete Node_Child::default_instance_;
  delete Node_Child_reflection_;
}

void protobuf_AddDesc_prob_5ftrie_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017prob_trie.proto\022\010lm.ngram\"8\n\rProbTrieP"
    "roto\022\t\n\001n\030\001 \001(\005\022\034\n\004root\030\002 \001(\0132\016.lm.ngram"
    ".Node\"\204\001\n\004Node\022\023\n\013pseudo_prob\030\001 \001(\001\022\017\n\007b"
    "ackoff\030\002 \001(\001\022#\n\005child\030\003 \003(\0132\024.lm.ngram.N"
    "ode.Child\0321\n\005Child\022\n\n\002id\030\001 \001(\005\022\034\n\004node\030\002"
    " \001(\0132\016.lm.ngram.Nodeb\006proto3", 228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prob_trie.proto", &protobuf_RegisterTypes);
  ProbTrieProto::default_instance_ = new ProbTrieProto();
  Node::default_instance_ = new Node();
  Node_Child::default_instance_ = new Node_Child();
  ProbTrieProto::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  Node_Child::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_prob_5ftrie_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_prob_5ftrie_2eproto {
  StaticDescriptorInitializer_prob_5ftrie_2eproto() {
    protobuf_AddDesc_prob_5ftrie_2eproto();
  }
} static_descriptor_initializer_prob_5ftrie_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProbTrieProto::kNFieldNumber;
const int ProbTrieProto::kRootFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProbTrieProto::ProbTrieProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lm.ngram.ProbTrieProto)
}

void ProbTrieProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  root_ = const_cast< ::lm::ngram::Node*>(&::lm::ngram::Node::default_instance());
}

ProbTrieProto::ProbTrieProto(const ProbTrieProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lm.ngram.ProbTrieProto)
}

void ProbTrieProto::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  n_ = 0;
  root_ = NULL;
}

ProbTrieProto::~ProbTrieProto() {
  // @@protoc_insertion_point(destructor:lm.ngram.ProbTrieProto)
  SharedDtor();
}

void ProbTrieProto::SharedDtor() {
  if (this != default_instance_) {
    delete root_;
  }
}

void ProbTrieProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProbTrieProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProbTrieProto_descriptor_;
}

const ProbTrieProto& ProbTrieProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prob_5ftrie_2eproto();
  return *default_instance_;
}

ProbTrieProto* ProbTrieProto::default_instance_ = NULL;

ProbTrieProto* ProbTrieProto::New(::google::protobuf::Arena* arena) const {
  ProbTrieProto* n = new ProbTrieProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProbTrieProto::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.ngram.ProbTrieProto)
  n_ = 0;
  if (GetArenaNoVirtual() == NULL && root_ != NULL) delete root_;
  root_ = NULL;
}

bool ProbTrieProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lm.ngram.ProbTrieProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 n = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_root;
        break;
      }

      // optional .lm.ngram.Node root = 2;
      case 2: {
        if (tag == 18) {
         parse_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lm.ngram.ProbTrieProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lm.ngram.ProbTrieProto)
  return false;
#undef DO_
}

void ProbTrieProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lm.ngram.ProbTrieProto)
  // optional int32 n = 1;
  if (this->n() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->n(), output);
  }

  // optional .lm.ngram.Node root = 2;
  if (this->has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->root_, output);
  }

  // @@protoc_insertion_point(serialize_end:lm.ngram.ProbTrieProto)
}

::google::protobuf::uint8* ProbTrieProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.ngram.ProbTrieProto)
  // optional int32 n = 1;
  if (this->n() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->n(), target);
  }

  // optional .lm.ngram.Node root = 2;
  if (this->has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->root_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lm.ngram.ProbTrieProto)
  return target;
}

int ProbTrieProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lm.ngram.ProbTrieProto)
  int total_size = 0;

  // optional int32 n = 1;
  if (this->n() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->n());
  }

  // optional .lm.ngram.Node root = 2;
  if (this->has_root()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->root_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbTrieProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.ngram.ProbTrieProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProbTrieProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProbTrieProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.ngram.ProbTrieProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.ngram.ProbTrieProto)
    MergeFrom(*source);
  }
}

void ProbTrieProto::MergeFrom(const ProbTrieProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.ngram.ProbTrieProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.n() != 0) {
    set_n(from.n());
  }
  if (from.has_root()) {
    mutable_root()->::lm::ngram::Node::MergeFrom(from.root());
  }
}

void ProbTrieProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.ngram.ProbTrieProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbTrieProto::CopyFrom(const ProbTrieProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.ngram.ProbTrieProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbTrieProto::IsInitialized() const {

  return true;
}

void ProbTrieProto::Swap(ProbTrieProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProbTrieProto::InternalSwap(ProbTrieProto* other) {
  std::swap(n_, other->n_);
  std::swap(root_, other->root_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProbTrieProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProbTrieProto_descriptor_;
  metadata.reflection = ProbTrieProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProbTrieProto

// optional int32 n = 1;
void ProbTrieProto::clear_n() {
  n_ = 0;
}
 ::google::protobuf::int32 ProbTrieProto::n() const {
  // @@protoc_insertion_point(field_get:lm.ngram.ProbTrieProto.n)
  return n_;
}
 void ProbTrieProto::set_n(::google::protobuf::int32 value) {
  
  n_ = value;
  // @@protoc_insertion_point(field_set:lm.ngram.ProbTrieProto.n)
}

// optional .lm.ngram.Node root = 2;
bool ProbTrieProto::has_root() const {
  return !_is_default_instance_ && root_ != NULL;
}
void ProbTrieProto::clear_root() {
  if (GetArenaNoVirtual() == NULL && root_ != NULL) delete root_;
  root_ = NULL;
}
const ::lm::ngram::Node& ProbTrieProto::root() const {
  // @@protoc_insertion_point(field_get:lm.ngram.ProbTrieProto.root)
  return root_ != NULL ? *root_ : *default_instance_->root_;
}
::lm::ngram::Node* ProbTrieProto::mutable_root() {
  
  if (root_ == NULL) {
    root_ = new ::lm::ngram::Node;
  }
  // @@protoc_insertion_point(field_mutable:lm.ngram.ProbTrieProto.root)
  return root_;
}
::lm::ngram::Node* ProbTrieProto::release_root() {
  // @@protoc_insertion_point(field_release:lm.ngram.ProbTrieProto.root)
  
  ::lm::ngram::Node* temp = root_;
  root_ = NULL;
  return temp;
}
void ProbTrieProto::set_allocated_root(::lm::ngram::Node* root) {
  delete root_;
  root_ = root;
  if (root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lm.ngram.ProbTrieProto.root)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_Child::kIdFieldNumber;
const int Node_Child::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_Child::Node_Child()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lm.ngram.Node.Child)
}

void Node_Child::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  node_ = const_cast< ::lm::ngram::Node*>(&::lm::ngram::Node::default_instance());
}

Node_Child::Node_Child(const Node_Child& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lm.ngram.Node.Child)
}

void Node_Child::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  node_ = NULL;
}

Node_Child::~Node_Child() {
  // @@protoc_insertion_point(destructor:lm.ngram.Node.Child)
  SharedDtor();
}

void Node_Child::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void Node_Child::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node_Child::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_Child_descriptor_;
}

const Node_Child& Node_Child::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prob_5ftrie_2eproto();
  return *default_instance_;
}

Node_Child* Node_Child::default_instance_ = NULL;

Node_Child* Node_Child::New(::google::protobuf::Arena* arena) const {
  Node_Child* n = new Node_Child;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node_Child::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.ngram.Node.Child)
  id_ = 0;
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}

bool Node_Child::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lm.ngram.Node.Child)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // optional .lm.ngram.Node node = 2;
      case 2: {
        if (tag == 18) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lm.ngram.Node.Child)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lm.ngram.Node.Child)
  return false;
#undef DO_
}

void Node_Child::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lm.ngram.Node.Child)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .lm.ngram.Node node = 2;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_, output);
  }

  // @@protoc_insertion_point(serialize_end:lm.ngram.Node.Child)
}

::google::protobuf::uint8* Node_Child::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.ngram.Node.Child)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .lm.ngram.Node node = 2;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->node_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lm.ngram.Node.Child)
  return target;
}

int Node_Child::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lm.ngram.Node.Child)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .lm.ngram.Node node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node_Child::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.ngram.Node.Child)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Node_Child* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node_Child>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.ngram.Node.Child)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.ngram.Node.Child)
    MergeFrom(*source);
  }
}

void Node_Child::MergeFrom(const Node_Child& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.ngram.Node.Child)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_node()) {
    mutable_node()->::lm::ngram::Node::MergeFrom(from.node());
  }
}

void Node_Child::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.ngram.Node.Child)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node_Child::CopyFrom(const Node_Child& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.ngram.Node.Child)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Child::IsInitialized() const {

  return true;
}

void Node_Child::Swap(Node_Child* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_Child::InternalSwap(Node_Child* other) {
  std::swap(id_, other->id_);
  std::swap(node_, other->node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node_Child::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_Child_descriptor_;
  metadata.reflection = Node_Child_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kPseudoProbFieldNumber;
const int Node::kBackoffFieldNumber;
const int Node::kChildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lm.ngram.Node)
}

void Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lm.ngram.Node)
}

void Node::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pseudo_prob_ = 0;
  backoff_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:lm.ngram.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prob_5ftrie_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.ngram.Node)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Node, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Node*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pseudo_prob_, backoff_);

#undef ZR_HELPER_
#undef ZR_

  child_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lm.ngram.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double pseudo_prob = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pseudo_prob_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_backoff;
        break;
      }

      // optional double backoff = 2;
      case 2: {
        if (tag == 17) {
         parse_backoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backoff_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_child;
        break;
      }

      // repeated .lm.ngram.Node.Child child = 3;
      case 3: {
        if (tag == 26) {
         parse_child:
          DO_(input->IncrementRecursionDepth());
         parse_loop_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_child()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_child;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lm.ngram.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lm.ngram.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lm.ngram.Node)
  // optional double pseudo_prob = 1;
  if (this->pseudo_prob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pseudo_prob(), output);
  }

  // optional double backoff = 2;
  if (this->backoff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->backoff(), output);
  }

  // repeated .lm.ngram.Node.Child child = 3;
  for (unsigned int i = 0, n = this->child_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->child(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lm.ngram.Node)
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lm.ngram.Node)
  // optional double pseudo_prob = 1;
  if (this->pseudo_prob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pseudo_prob(), target);
  }

  // optional double backoff = 2;
  if (this->backoff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->backoff(), target);
  }

  // repeated .lm.ngram.Node.Child child = 3;
  for (unsigned int i = 0, n = this->child_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->child(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lm.ngram.Node)
  return target;
}

int Node::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lm.ngram.Node)
  int total_size = 0;

  // optional double pseudo_prob = 1;
  if (this->pseudo_prob() != 0) {
    total_size += 1 + 8;
  }

  // optional double backoff = 2;
  if (this->backoff() != 0) {
    total_size += 1 + 8;
  }

  // repeated .lm.ngram.Node.Child child = 3;
  total_size += 1 * this->child_size();
  for (int i = 0; i < this->child_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.ngram.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.ngram.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.ngram.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.ngram.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  child_.MergeFrom(from.child_);
  if (from.pseudo_prob() != 0) {
    set_pseudo_prob(from.pseudo_prob());
  }
  if (from.backoff() != 0) {
    set_backoff(from.backoff());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.ngram.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.ngram.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  std::swap(pseudo_prob_, other->pseudo_prob_);
  std::swap(backoff_, other->backoff_);
  child_.UnsafeArenaSwap(&other->child_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Child

// optional int32 id = 1;
void Node_Child::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Node_Child::id() const {
  // @@protoc_insertion_point(field_get:lm.ngram.Node.Child.id)
  return id_;
}
 void Node_Child::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:lm.ngram.Node.Child.id)
}

// optional .lm.ngram.Node node = 2;
bool Node_Child::has_node() const {
  return !_is_default_instance_ && node_ != NULL;
}
void Node_Child::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::lm::ngram::Node& Node_Child::node() const {
  // @@protoc_insertion_point(field_get:lm.ngram.Node.Child.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
::lm::ngram::Node* Node_Child::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::lm::ngram::Node;
  }
  // @@protoc_insertion_point(field_mutable:lm.ngram.Node.Child.node)
  return node_;
}
::lm::ngram::Node* Node_Child::release_node() {
  // @@protoc_insertion_point(field_release:lm.ngram.Node.Child.node)
  
  ::lm::ngram::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void Node_Child::set_allocated_node(::lm::ngram::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lm.ngram.Node.Child.node)
}

// -------------------------------------------------------------------

// Node

// optional double pseudo_prob = 1;
void Node::clear_pseudo_prob() {
  pseudo_prob_ = 0;
}
 double Node::pseudo_prob() const {
  // @@protoc_insertion_point(field_get:lm.ngram.Node.pseudo_prob)
  return pseudo_prob_;
}
 void Node::set_pseudo_prob(double value) {
  
  pseudo_prob_ = value;
  // @@protoc_insertion_point(field_set:lm.ngram.Node.pseudo_prob)
}

// optional double backoff = 2;
void Node::clear_backoff() {
  backoff_ = 0;
}
 double Node::backoff() const {
  // @@protoc_insertion_point(field_get:lm.ngram.Node.backoff)
  return backoff_;
}
 void Node::set_backoff(double value) {
  
  backoff_ = value;
  // @@protoc_insertion_point(field_set:lm.ngram.Node.backoff)
}

// repeated .lm.ngram.Node.Child child = 3;
int Node::child_size() const {
  return child_.size();
}
void Node::clear_child() {
  child_.Clear();
}
const ::lm::ngram::Node_Child& Node::child(int index) const {
  // @@protoc_insertion_point(field_get:lm.ngram.Node.child)
  return child_.Get(index);
}
::lm::ngram::Node_Child* Node::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:lm.ngram.Node.child)
  return child_.Mutable(index);
}
::lm::ngram::Node_Child* Node::add_child() {
  // @@protoc_insertion_point(field_add:lm.ngram.Node.child)
  return child_.Add();
}
::google::protobuf::RepeatedPtrField< ::lm::ngram::Node_Child >*
Node::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:lm.ngram.Node.child)
  return &child_;
}
const ::google::protobuf::RepeatedPtrField< ::lm::ngram::Node_Child >&
Node::child() const {
  // @@protoc_insertion_point(field_list:lm.ngram.Node.child)
  return child_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ngram
}  // namespace lm

// @@protoc_insertion_point(global_scope)
